[ Component ]
    1) 정의
        react에서 독립적이고 재사용 가능한 함수
    2) 특징
        - HTML·JS·CSS를 하나의 컴포넌트로 구성

[ Component 만들기 ]
    1) function 선언
    2) 컴포넌트명 : defualt 컴포넌트 파일명과 일치
    3) ( props ) : property 속성으로 <컴포넌트 속성=값 속성=값 /> 
    4) 중괄호안에서 JS와 HTML을 작성
    5) return 뒤로 HTML 작성
        - JSX : HTML + JS
        - JPS : HTML + Java
        - 함수의 반환값은 무조건 1개 이므로, return뒤 반환은 빈 마크업 <> </>으로 감싼 후 HTML 작성
    6) JSX 파일 내 exprot defualt를 단 1개만 정의
    
    ```
    export defualt function Component1( props ){ 
        // JS 작성 시작

        // HTML 작성 시작
        return ( <></> )

    } //func end
    ```

[ Component 불러오기 ]
    1) 다른 JSX 파일에서
        ` import 컴포넌트명 form 'jsx파일경로' `
        `<컴포넌트명/>`
    2) 같은 JSX 파일 내에서
        `<컴포넌트명/>`

[ JSX ]
    1) 정의 
        컴포넌트 안에서 HTML·JS와 비슷한 문법을 사용할 수 있도록하는 확장형 문법
    2) 주의점
        JSX 문법은 브라우저가 절대 해석하지 못함 == 컴파일하지 못함
        >> 따라서, 반드시, react rendering 이 필요
    3) 특징
        (1) JSX는 HTML 처럼 보이지만, HTML과 다름!
            JSX는 가상 DOM을 객체로 하여 유연한 사용이 가능함
            [조건 1] 마크업/컴포넌트의 close 필수 
                    < / >
            [조건 2] 반드시 전체 JSX를 감싸는 상위 요소(dom)이 필요
                    return ( <> </> )
            [조건 3] 요소가 2줄인 경우, 소괄호로 감싼다.
        (2) JSX 문법에서 JS 표현식을 사용할 경우, `{ JS 표현식 }` 으로 기술
            단, 선언부는 {} 안에 기재할 수 없음 
        (3) JSX 내에, HTML 주석 불가능
            `{ /* */ }`의 JS 주석을 활용 

[ props ]
    - 컴포넌트에 속성명을 매개변수로 전달하여 사용하는 방법