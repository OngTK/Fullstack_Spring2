[ 암호화 ]
    1. 정의
        자료를 보호 하기 위해서 사람이 이해하기 어려운 문자로 변환
    2. 목적
        자료보호, 신뢰성 확보, 무결성 유지 등
    3. 사용처
        계정 비밀번호, HTTPS, 금융 거래 등
    4. 주요 용어
        1) 평문    : 원래의 자료
        2) 암호문  : 암호화된 자료
        3) 암호화  : 평문 자료를 암호문으로 변환하는 과정
        4) 복호화  : 암호문 자료를 평문으로 변화하는 과정
        5) 단반향 암호화 : 평문 > 암호문 OK / 암호문 > 평문 X
        6) 양방향 암호화 : 평문 > 암호문 OK / 암호문 > 평문 OK
        7) 해시 함수    : 자료를 고정된 길이로 변환하는 함수
            * 서로 다른 자료들을 동일한 길이의 자료로 변환하는 함수
            * 임의의 계산식으로 변환하는 과정이므로 복호화가 불가
        8) Salt     : 암호화할 때 사용되는 랜덤값으로, 동일한 알고리즘으로 서로 다른 결과가 발생
    5. 주요 암호 알고리즘
        1) 비밀번호 : Bcrypt       - 해시 기반의 단반향 암호화
        2) 파일 : SHA-256         - 256피트 해시 함수 기반의 단방향 암호화
        3) 웹통신 : TLS(HTTPS)     - 데이터 송수신 암호화, HTTP(암호화되지 않은 상태), HTTPS(암호화된 상태)
        4) 전자서명 : SHA-256      - 서명 검증

[ Bcrypt ]
    1. 정의
        : 해시 삼수를 이용하며 주로 비밀번호를 암호화 할 때, 사용함
    2. 특징
        1) Salt : 동일한 비밀번호가 들어와도 랜덤·서로 다른 계산식을 사용하여 암호화를 함
        2) 반복 연산 적용 : 검증 속도를 늦출 수 있음
        3) 원본 복구·복호화 불가능 = 단반향 암호화
    3. 형태
        ` $2a$10$69bMrChodVYxOcvM/cUo7evsho3hw6YBJT9yepHudwBlIvi7KlV0. `
        1) $2a      : 비크립트 버전
        2) $10      : 연산 반복수, 2 제곱근
        3) $69 ~ vM : Salt (11글자)
        4) vs~V0    : 해시값 (31글자)
    4. 사용법 (Service 단)
        1) 라이브러리 설치
            ` implementation 'org.springframework.security:spring-security-crypto:6.4.4'
        2) 비크립트 객체 생성
            ` private final BCryptPasswordEncoder 변수명 = new BCryptPasswordEncoder(); `
        3) 암호화
            ` String 암호문 = 비크립트객체.encode( 평문 ) `
        4) 검증 (단, 복호화는 불가)
            ` boolean result = 비크립트객체.matches( 평문, 암호문 ); `
