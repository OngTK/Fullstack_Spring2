[ ALTER ]
    - 기존 테이블의 구조 변경
    - 사용법
        1) 추가
            ` alter talbe 테이블명 add column 새로운필드명 타입; `
        2) 타입 수정
            ` alter table 테이블명 modify column 수정할필드명 타입; `
        3) 필드명 수정
            ` alter talbe 테이블명 change column 기존필드명 새로운필드명 타입; `
        4) 삭제
            ` alter table 테이블명 drop column 삭제할필드명; `
        5) PK 제약조건 추가
            ` alter table 테이블명 add constraint 제약조건명 primary key(pk필드명); `
        6) FK 제약조건 추가
            ` alter table 테이블명 add constraint 제약조건명 foreign key(fk필드명) references 참조테이블(KF필드명); `
        7) 일반 제약조건 추가
            ` alter table 테이블명 add constraint 제약조건명 제약조건(필드명)`
        8) 제약조건 삭제
            ```SQL
            alter table 테이블명 drop primary key;
            alter table 테이블명 drop foreign ke 삭제할제약조건명;
            alter table 테이블명 drop constraint 삭제할제약조건명;
            ```

[ SHOW ]
    - 테이블·필드의 정보를 확인
    - 사용법
        1) 테이블의 필드 확인
            ` show columns from 테이블명; `
        2) 제약조건 확인
            ` select * from information_schema.table_constraints; `

[ SUBQUERY ]
    - select 내에 select를 사용하는 방법
    - 사용법
        ` select [select절] from [select절] where [select절] `
    - Join

[ Transaction ]
    - 정의 : 여러 SQL 작업들을 하나의 단위(묶음)로 처리하여 모두 성공이면 Commit, 하나라도 실패시 Rollback 하는 기능
    - 목적 : 데이터 무결성 유지와 안정성을 보장하는 개념
    - 명령어
        1) 자동 commit 해제
            ` set auto commit = 0; `
        2) transaction 시작
            ` start transaction; `
        3) commit;      : 저장 성공
        4) rollback;    : 저장 취소
        5) 저장 시점·위치 지정
            ` savepoint 포인트명; `
        6) 특정 시점으로 rollback
            ` rollback to 포인트명; `

    VS Java
        @Transactional
        메소드 내에 RuntimeException 으로 롤백

[ View ]
    - 정의 : 실제 데이터를 저장하지 않고, Select query 결과를 이름으로 저장하는 가상의 테이블
    - 목적 : SQL문의 재사용, 보안, 일부 뷰에서는 수정 불가능
    - 명령어
        1) view 생성
            ` create [ or replace ] view 뷰명 as 쿼리문; `
        2) view 수정
            ` alter view 뷰명 as 새로운쿼리; `
        3) view 삭제
            ` drop view if exists 뷰명; `
        4) view 목록 확인
            ` show full tables where table_type = 'view'; `

[ DCL ]
    1) 정의
        : DB 사용자 계정 생성, 권한 부여, 권한 회수 등을 관리하는 명령어
    2) 사용처
        - 개발자들에게 DB 접근 권한 관리하므로 보안 관리
        - 계정마다 DB 분리
    3) 주요 명령어
        (1) 새로운 계정 생성
            ` create user '계정명'@'허용도메인' identified by '비밀번호'; `
            * 허용 도메인
                : localhost - 로컬환경
                : % - 모든 IP
                : 특정 IP or 특정 도메인
        (2) 권한 부여
            ` grant 사용권한 on DB명.[tb명 or view명] to '계정명'@'허용도메인'; `
            * 사용 권한
                all privileges / insert / select / update /  delete / create 등등
        (3) 권한 회수
            ` revoke 사용권한 on DB명.[tb명 or view명] from '계정명'@'허용도메인'; `
        (4) 비밀번호 수정
            ` alter user '계정명'@'허용도메인' identified by '비밀번호'; `
        (5) 계정 삭제
            ` drop user '계정명'@'허용도메인'; `
        (6) 기타
            - 특정 계정의 권한 목록 조회
                ` show gran for '계정명'@'허용도메인'; `
            - 전체 계정의 권한 조회
                ` select * from mysql.user;`

[ INDEX ]
    1) 정의
        : 데이터를 특정 필드를 기준으로 검색을 빠르게 하기 위한 색인
    2) 목적
        : select, join, order by 등 속도 향상, 대용량 데이터 처리
        : 단, insert / update 등의 갱신시 속도가 느릴 수 있음
    3) 주요 명령어
        (1) 테이블의 모든 인덱스 목록 확인
            ` show index from tb명; `
            * pk는 기본적으로 index를 가짐
        (2) 단일 인덱스 생성
            ` create index 인덱스명 on 테이블명(필드명); `
        (3) 복합 인덱스 생성
            ` create index 인덱스명 on 테이블명(필드명1,필드명2); `
        (4) 인덱스 삭제
            ` drop index 인덱스명 on tb명; `
        (5) 성능 확인
            ` explain analyze 쿼리문; `
        (6) NLP·자연어 인덱스
            ` create fulltext index 인덱스명 on 테이블명(필드명); `
            ` select * from 테이블명 where match(필드명) against ('검색어'); `
            * 자연어 인덱스는 완전 일치해야 하므로, 일부 포함 검색은 불가