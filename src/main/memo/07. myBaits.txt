[ DAO ]
    1) 정의
        - Java에서 DB와 직접 연결하고 SQL 실행을 담당하는 class
    2) 주요 인터페이스
        Connection
        PreparedStatement
        ResultSet

[ Mybatis ]
    1) 정의
        - 개발자가 작성한 SQL 문을 Java 객체로 자동으로 매핑 시켜주는 프레임워크
    2) 특징
        - SQL 매핑
        - 결과 매핑
        - 유연성
        - Spring에서 공식 지원
    3) 설치
        - start.spring.io 에서 dependencies 추가
        - 단, DBMS 라이브러리도 같이 존재해야 함.      ex) MySql, Oracle etc..
    4) Java와 DB 연동 설정
        - at `application.properties`
        (1) 기본 세팅
        - src > main > resources > application.properties 생성
        - setting > encoding > Default encoding for properties file > UTF-8 설정

        (2) JDBC 관련 명령어 작성
        ```
        spring.datasource.url=
        spring.datasource.username=
        spring.datasource.password=
        ```

[ 사용법1 - @Annotation ]
    1) application.properties 세팅
        ```
            spring.datasource.url=
            spring.datasource.username=
            spring.datasource.password=
        ```

    2) DAO를 대체할 Mapper Interface를 정의
        - interface 상단에
        @Mapper 어노테이션 기재

        - 사용 어노테이션
            @Insert("Insert into ~~")
            @Select("select * from ~~")
            @Update("update ~~ set ~~")
            @Delete("delete from ~~")

        - 문법
            #{} : SQL 문 안에 매개변수 삽입, 반드시 DTO의 멤버변수와 등일한 이름
            ex) "select * from table where no=#{no}"

        - 추상메소드에 대한 선언 후 어노테이션 및 문법 작성
            - 매개변수는 SQL의 매개변수로 사용
            - SQL 결과를 반환타입으로 선정
                int : insert / update / delete 처리 레코드 수
                Map/Dto/List : select 조회 결과 자료를 반환

        - Servie 계층
            interface를 DI 하여, interface 메소드를 실행

        - PK 반환 (insert 시)
            `@Options( useGeneratedKeys = true , keyProperty = "pk속성명" )`

[ 사용법2 - XML ]
    2) application.properties 설정
        ```
            mybatis.mapper-location=classpath:/폴더명/파일명.xml
            mybatis.mapper-location=classpath:/mappers/*.xml
        ```
    2-1) 설정한 폴더 내에서 xml 파일 생성

    3) XML 매퍼 파일 골격
    ```xml
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 30.//EN"
                "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

        <mapper namespace="example.day13_251013.XmlMapper">
            <!-- SQL 구문들(insert/select/update/delete)이 이 안에 위치 -->
        </mapper>
    ```

    4) mapper 마크업의 namespace에 인터페이스 연동

    5) mapper 마크업 내에 SQL 마크업을 사용
        ```xml
            <insert> </insert>
            <select> </select>
            <update> </update>
            <delete> </delete>
        ```

    6) 마크업 내의 요소
        `<insert id=" " parameterType=" " useGeneratedKeys="true" keyProperty=" ">`
            id                  : Mapper 인터페이스 내의 추상메소드 명
            parameterType       : 파라미터 DTO(또는 Map/기본형) 지정
            useGeneratedKeys    : DB가 생성한 PK를 DTO 필드(keyProperty)에 바인딩
            keyProperty         : PK 속성명
            resultType          : 단일 반환 레코드 타입

[ MyBatis 동적 쿼리 ]
    1) 정의
        : SQL 실행 시점에서 MyBatis에서 제공하는 문법이 SQL을 구성하는 방법
    2) 사용법
        : XML 에서 사용할 경우, <if test=" "> 를 통해서 동적쿼리를 바로 사용
        : anotation의 경우 ```<script> </script>``` 내에서 작성
    3) 종류
        <if> <where> <foreach>

        ```
            <if test="조건식">
            </if>
        ```
        ```
            <foreach collection="매개변수명" item="반복변수명" separator = "반복 사이 문자">
            </foreach>
        ```
        ```
            where 1=1 또는
            <where>

            </where>
        ```


[Spring SQL 자동 실행 파일]
    1) resource 폴더 내에 schema.sql, data.sql 파일을 작성
        - schema.sql    : 테이블 생성/삭제 등 DDL 문 실행
                        : (주의) DB 생성/삭제는 불가
                        : drop table 로 삭제 후 create table 이 오도록 작성
                        : FK가 삽입된 table이 먼저 삭제되도록 함
        - data.sql      : 데이터 삽입 등 DML 실행

    2) application.properties 설정
        (1) SQL 자동 실행 여부 지정
            `spring.sql.init.mode = always`
            - always : 항상 재실행
            - never : 재실행 하지 않음
        (2) schema.sql 파일 경로 지정
            `spring.sql.init.schema.locations = classpath:/schema.sql`
            `spring.sql.init.schema-locations = classpath:/sql/schema.sql`
            - classpath = src/main/resources
            - resource 패키지 바로 아래와 내부 폴더에 있을 때 명령어의 기호가 다름으로 주의!
        (3) data.sql 파일 경로 지정
            `spring.sql.init.data.locations = classpath:/data.sql`
            `spring.sql.init.data-locations = classpath:/sql/data.sql`