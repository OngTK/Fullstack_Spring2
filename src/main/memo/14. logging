[ 로깅 ]
    1) 정의 : 프로그램 실행 중 발생하는 정보를 기록하는 행위
    2) 목적 : print 대신 로깅을 사용하여 '저장' 또는 효율적인 구분(레벨)으로 유지보굿
    3) Spring Logging 방법
        권장. Lombok에서 제공하는 @Log4j2 활용

        ```java
            @Log4j2
            class controller{}
        ```

    4) 주요 객체/함수
        log.debug() : 개발 및 테스트 단계에서 주로 사용
        log.info()  : 상태 확인을 위해 주로 사용, 개발/운영 시 사용
        log.warn()  : 경고 확인, 운영 시 사용
        log.error() : 예외·에러 확인, 운영 시 사용

    5) application.properties 세팅

        5.1) Log 기본 설정
        - 레벨 : debug < info < warn < error
        - info 설정하면 : info , warn , error 가 출력
        - 해당 레벨 이하의 log 이력이 출력
        ```
            logging.level.(Java 이하 패키지 경로) = debug
        ```
        5.2) 로그 파일 처리 설정
        - PJ 이하 경로 작성
        ```
            logging.file.name = 패키지명/파일명.log
            logging.file.name = logs/app.log
        ```
        5.3) 로그파일 설정/옵션
        ```
            # 로그파일의 최대 용량
            logging.logback.rollingpolicy.max-file-size = 1MB
            # 최대 파일 개수
            # 최대 파일 이후부터는 가장 오래된 파일이 삭제된 후 신규 log파일 생성
            logging.logback.rollingpolicy.max-history = 10
        ```
        5.4) 프레임워크 내부 로그 줄이기 ( 운영단계에서 warn 이상만 출력 )
        ```
            # Spring 실행시 초기 로그 일부 줄이기
            spring.main.log-startup-info = false
            logging.level.org.springframework.boot.web=warn
            logging.level.org.springframework.boot.web.embedded.tomcat=warn
            logging.level.org.apache.catalina=warn
            logging.level.org.apache.coyote=warn
        ```
        5.5) log 형식 설정
        - %msg : 로그메시지만 출력
        - %n : 줄바꿈
        - %d{ y M d H m s } : 날짜·시간 출력
        - %level : 레벨
        - %logger : 클래스/경로
        ```
            logging.pattern.file = [%d{ yyyy-MM-dd HH:mm:ss }] %msg %n
            logging.pattern.console = [%d{ yyyy-MM-dd HH:mm:ss }] %level %logger %msg %n
        ```