[ react ]
    1) 정의 : Meta 사에서 개발한 JS 라이브러리
    2) 개발 원인
        "좋아요. 댓글쓰기 등" 기능을 하면 페이지를 전환해야 하는 불편함을 해소하기 위해 개발
        -> 페이지 전환 없이 기능들을 구현
    3) 목적
        - JS에서 부족한 UI 조작과 효율성 보완
        - 웹/앱 유연한 UI 제공
        - 트렌디한 변화에 빠르게 대응
    4) 특징
        - 화면을 Component(함수) 기반으로 생성
        - 재사용성이 높음
        - 가상 DOM·HTML을 사용하여 성능 최적화
            컴포넌트·func을 마크업처럼 사용
        - Hooks·훅 지원 ☆★☆★☆★☆★
            : 함수형 프로그래밍 방식으로 다양한 기능 지원
    5) 사용처
        - 웹개발 : React
        - 앱개발 : React Native (2021 지원 중단) /
         -웹/앱 통합 개발 : React Native for web
++ 사담 : 현재 트랜드  : spring + react + next.js

    6) SPA
        - Single Page Application
        - HTML 한 장으로 구성, CSR ·Client Side Rendering 방식
        - CSR : 사용자 브라우저에서 화면전환
        - 장점 : 빠름, 서버 부담이 적음,
        - 단점 : 최초 로딩이 느림, 검색엔진(SEO)에 불리함,
        ex) React,
++ 사담 : SSR을 고집하기 위해, next.js를 도입 >> 단점보완

        <-> MPA · Multi Page Application
        - HTML 여러 장으로 구성, SSR·Server Sid Rendering 방식
        - SSR : 서버가 제공하여 사용자 브라우저에서 화면 전환
        - 장점 : 검색엔진(SEO), 필요한 데이터만 사용
        - 단점 : 새로고침(깜박거림), 서버에 부담이 큼
        ex) JSP

[ React 환경 설치 ]
    1) Node.js 설치
        - https://nodejs.org/ko/
        - v22.19.0(LTS) / windows
        - 하단 windows 설치 프로그램(.msi) 클릭
        - node js version 확인
            - cmd : node -v : version 20 이상으로
                    npm -v  : version 8 이상
        (1) Node.js
            - 크롬 엔진을 사용하여 HTML에 종속되지 않고 자체적인 JS를 실행하도록 하는 라이브러리
            - npm · node package manager
                : node.js 기반의 라이브러리·패키지를 설치·관리해주는 프로그램          <-> java의 gradle

    2) REACT 설치
        - 설치할 폴더를 선정 : Spring2 > src > main
        - main 우클릭 > 통합터미널 열기 (vsCode 기준)
        - `npm create vite@latest 프로젝트명 --template react`
            >> npm create vite@latest reactapp --template react
            ```
            Need to install the following packages:
            create-vite@7.1.1
            Ok to proceed? (y)
            ``` y 엔터
        - [ Select a framework ] > [ React ]로 방향키로 선택 후 엔터
        - [ Select a variant ] > [JavaScript + SWC]
        - 터미널에 아래에 3개의 명령어를 실행
            cd reactapp
                : reactapp 디렉토리로 이동
            npm install
                : npm 설치
            npm run dev
                : react 실행

        - 결과        
        ```
            ➜  Local:   http://localhost:5173/
            ➜  Network: use --host to expose
            ➜  press h + enter to show help
        ```
        + src/main/reactapp 폴더가 생성됨

        (1) node.js를 처음 설치한 PC의 경우 error 발생
            - vscode 재부팅 > 관리자 권한으로 vsCode 재실행
            - npm 사용을 위한 강력 권한 부여(터미널) : 
                Get-ExecutionPolicy       // 결과 : Restricted
                Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned
                Get-ExecutionPolicy         // 결과(성공) : RemoteSigned 
                    
    3) react 종료 방법
        - vscode 종료
        - 터미널 종료
        - 터미널에 ctrl + c 입력 후 종료

    4) 이미 설치한 react를 실행하는 방법
        - reactapp 폴더 우클릭 > 통합터미널에서 열기
        - npm run dev
            >> 서버가 실행되면 자동 리빌딩 되므로 매번 새로고침할 필요가 없다!!!!!!!!!!!!

[ React 프로젝트 구조 ]
    1) node_modules
        - 현재 프로젝트에 설치된 라이브러리로 자동 생성되며 git에 commit 되지 않음
        - 해당 폴더가 없을 경우, reactapp 폴더-터미널에서 ` npm install ` 명령어 입력
    2) public 
        - 주로 정적 파일을 보관
    3) src 
        - 주로 코드 파일을 보관
        (1) App.jsx : 최상위 컴포넌트       (삭제 ok)
            App.css : 컴포넌트의 css 파일   (삭제 ok)
        (2) main.jsx : 최상위 컴포넌트를 렌더링하는 파일 (※ 절대 삭제 X) ☆★☆★☆★☆★☆★☆★
            main.css : 최상위 css 파일

        - 추후 아래와 같이 역할에 따라 패키지를 구성·관리 
            - components
            - packages
            - api 
    4) index.html
        - react(SPA)의 최상위 HTML 파일 (※ 절대 삭제 X)
    5) package.json
        - 현재 프로젝트의 설정과 라이브러리 의존성을 포함하는 파일 (※ 절대 삭제 X) 

https://docs.google.com/spreadsheets/d/1DTfgJnPK3GPjo4Ri-Lv7rF7M5wnSlxcf3VK6V0S2JMI/edit?gid=0#gid=0