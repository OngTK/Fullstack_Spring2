<?xml version="1.0" encoding="UTF-8" ?>
<!-- XML : 마크업 기반 데이터 저장(설정)/전달/교환(API)을 위한 프로그래밍 언어 -->


<!-- XML 파일 내 MyBatis 라이브러리 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!-- xml 과 매핑할 인터페이스 경로 설정 -->
<mapper namespace="example.day13_251013.XmlMapper"> <!-- mapper 시작 -->

    <!-- [1] 등록-->
    <!-- id : 추상 메소드 이름 -->
    <!-- parameterType : 매개변수 타입의 경로 -->
    <insert id="save" parameterType="example.day13_251013.StudentDto"
            useGeneratedKeys="true" keyProperty="sno">
        INSERT INTO student(name, kor, math) values( #{name}, #{kor}, #{math});
    </insert>

    <!-- [2] 전체조회 -->
    <!-- resultType : 반환타입 경로   -->
    <select id="findAll" resultType="example.day13_251013.StudentDto">
        Select * from student;
    </select>

    <!-- [3] 개별 조회 -->
    <select id="find" parameterType="int" resultType="example.day13_251013.StudentDto">
        select * from student where sno = #{sno};
    </select>

    <!-- [4] 개별 삭제 -->
    <delete id="delete" parameterType="int">
        delete from student where sno = #{sno};
    </delete>

    <!-- [5] 수정 -->
    <update id="update" parameterType="example.day13_251013.StudentDto">
        update student set kor = #{kor}, math = #{math} where sno = #{sno};
    </update>

    <!-- 동적 쿼리 -->
    <!-- [6]   -->
    <select id="query2" parameterType="int" resultType="example.day13_251013.StudentDto">
        select * from student where 1=1
        <if test="kor != null ">
            and kor >= #{kor}
        </if>
    </select>

    <!-- [7] 이름이 포함된 or 수학 점수가 이상인 검색 -->
    <!-- parameterType이 2 이상 이면 생략 or DTO로 묶기   -->
    <!-- concat : SQL에서 문자열을 연결해주는 함수   -->
    <!-- where 1=1 대신해서 <where> 마크업 사용 가능   -->
    <select id="query3" resultType="example.day13_251013.StudentDto">
        select * from student
        <where>
            <if test="name != null">
                and name like concat( '%' , #{name} , '%' )
            </if>
            <if test="math != 0 ">
                and math >= #{math}
            </if>
        </where>
    </select>

    <!-- [8] 복수의 학생을 등록 -->
    <insert id="saveAll" parameterType="list" useGeneratedKeys="true" keyProperty="sno">
        INSERT INTO student(name, kor, math) values

        <foreach collection="list" item="student" separator=",">
            (#{student.name},#{student.kor},#{student.math})
        </foreach>
    </insert>
    <!-- collection : 컬렉션 타입 - 주로 list -->
    <!-- item : 반복 변수명-->
    <!-- separator : 구분자-->

</mapper> <!-- mapper 끝 -->